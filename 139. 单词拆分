
//时间复杂度：O(n^2),空间复杂度：O(n)
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        if(s.empty())
            return false;
        //状态定义：F(i)表示前i个字符的是否能被拼接成功
        int len = s.size();
        vector<bool> canBreak(len+1,false);
        //初始化:辅助状态，辅助判定整个字符串是否能分割，没有实际意义
        canBreak[0] = true;
        for(int i = 1;i <= len;i++)
        {
            //状态转移方程：F(i):j<i && F(j) && [j+1,i]
            //比如：F(4):F(3) && ‘t’ , F(2) && "et" ,F(1) && "eet",F(0) && "leet"
            for(int j = i-1;j >= 0;j--)
            {
                if(canBreak[j] 
                && find(wordDict.begin(),wordDict.end(),s.substr(j,i-j)) != wordDict.end())
                {
                    canBreak[i] = true;
                    break;
                }
            }
        }
        //返回结果：F(len)
        return canBreak[len];
    }
};
