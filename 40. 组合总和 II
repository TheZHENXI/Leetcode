class Solution {
public:
    void dfs(vector<vector<int>>& Solutions,vector<int>& Solution,
    vector<int>& candidates,int target,int curIdx,int curSum)
    {
        //边界处理
        if(curSum == target)
        {
            Solutions.push_back(Solution);
            return;
        }
        if(curSum > target)
            return;
        //搜索所有可能
        for(int i = curIdx;i < candidates.size();i++)
        {
            //处理当前值
            //去重，相同起点用一次
            if(i > curIdx && candidates[i] == candidates[i-1])// 1 1 2 5 6 7 10
                continue;
            Solution.push_back(candidates[i]);
            dfs(Solutions,Solution,candidates,target,i + 1,curSum + candidates[i]);
            //回溯
            Solution.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) 
    {
        sort(candidates.begin(),candidates.end());//排序
        vector<vector<int>> Solutions;
        vector<int> Solution;
        dfs(Solutions,Solution,candidates,target,0,0);
        return Solutions;
    }
};
