class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) 
    {
        
        //状态定义：F(i,j)从[0,0]到[i,j]的不同路径数目
        //初始化
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();        
        vector<vector<int>> uniquePath(m,vector<int>(n,0));
        //F(0,j)
        for(int j = 0; j < n;j++)
        {
            if(obstacleGrid[0][j] != 1)
            {
                uniquePath[0][j] = 1;
            }
            else
                break;//障碍后的不处理，全是0
        }
        //F(i,0)
        for(int i = 0; i < m;i++)
        {
            if(obstacleGrid[i][0] != 1)
            {
                uniquePath[i][0] = 1;
            }
            else
                break;//障碍后的不处理，全是0
        }
        for(int i = 1;i < m;i++)
        {
            for(int j = 1;j <n;j++)
            {
                //状态转移方程:F(i,j) = F(i-1,j)+F(i,j-1)  F(i,j) = 0;
                if(obstacleGrid[i][j] != 1)
                    uniquePath[i][j] = uniquePath[i-1][j] + uniquePath[i][j-1];
                else
                    uniquePath[i][j] = 0;
            }
        }
        //返回结果：F(m-1,n-1) 终点
        return uniquePath[m-1][n-1];
    }
};
