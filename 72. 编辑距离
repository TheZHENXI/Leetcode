class Solution {
public:
    int minDistance(string word1, string word2) 
    {
        int len1 = word1.size();
        int len2 = word2.size();
        //状态定义：F(i,j) word1的前i个字符转换成word2的前j个字符的最短编辑距离
        vector<vector<int>> MD(len1 + 1,vector<int>(len2 + 1,0));
        //初始化 
        //F(i,0) = i,word2为空串       
        for(int i = 0;i <= len1;i++)
        {
            MD[i][0] = i;
        }
        //F(0,j) = j ,word1为空串
        for(int j = 0;j <= len2;j++)
        {
            MD[0][j] = j;
        }
        

        for(int i = 1;i <= len1;i++)
        {
            for(int j = 1;j <= len2;j++)
            {   
                //F(i,j) = min(F(i-1,j)+1, F(i,j-1)+1, F(i-1,j-1)+(word1[i] ！= word2[j]))
                //删除、插入中选一个小的
                MD[i][j] = min(MD[i-1][j],MD[i][j-1]) + 1;

                //替换
                if(word1[i-1] != word2[j-1])
                {
                    MD[i][j] = min(MD[i][j],MD[i-1][j-1]+1);
                }
                else
                {
                    MD[i][j] = min(MD[i][j],MD[i-1][j-1]);
                }
            }
        }
        return MD[len1][len2];
    }
};
