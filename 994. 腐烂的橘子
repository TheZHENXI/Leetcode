int nextP[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
class Solution {
public:
    //BFS的次数
    int orangesRotting(vector<vector<int>>& grid) 
    {   
        queue<pair<int,int>> q;
        int row = grid.size();
        int col = grid[0].size();
        //遍历grid,将第分钟的坏橘子都入队
        for(int i= 0;i < row;i++)
        {
            for(int j = 0;j < col;j++)
            {
                if(grid[i][j] == 2)
                    q.push(make_pair(i,j));
            }
        }
        //搜索
        int step = 0;
        while(!q.empty())
        {
            //获取同一时间的坏橘子个数
            int size = q.size();
            int flag = 0;
            //将同一时间的坏橘子都出队
            while(size--)
            {
                //获取头元素
                pair<int,int> curPos = q.front();
                q.pop();
                //感染当前位置上下左右的橘子
                for(int i = 0;i < 4;i++)
                {
                    int nx = curPos.first  + nextP[i][0];
                    int ny = curPos.second + nextP[i][1];

                    if(nx >= row || nx < 0
                    || ny >= col || ny < 0)
                        continue;
                    //新鲜 则感染、入队
                    if(grid[nx][ny] == 1)
                    {
                        flag = 1;//最后一次遍历队列，但是并没有感染新的橘子，会导致结果多+1
                        grid[nx][ny] = 2;
                        q.push(make_pair(nx,ny));
                    }
                }
            }
            if(flag)
                ++step;
        }
        
        //在此遍历是否还有新鲜橘子
        for(int i= 0;i < row;i++)
        {
            for(int j = 0;j < col;j++)
            {
                if(grid[i][j] == 1)
                    return -1;
            }
        }
        return step;
    }
};
