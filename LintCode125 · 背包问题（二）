class Solution {
public:
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param a: Given n items with size A[i]
     * @param v: Given n items with value V[i]
     * @return: The maximum value
     */
    //时间复杂度：O(n*m),空间复杂度O(n*m)
    int backPackII(int m, vector<int> &a, vector<int> &v) {
        //状态定义：F(i,j) 在前i个商品中选择，背包大小为j时能装入的最大价值
        //初始化：F(i,0) = 0,F(0,j) = 0
        int n = a.size();//商品个数
        vector<vector<int>> maxValue(n+1,vector<int>(m+1,0));
        for(int i = 1;i <= n;i++)
        {
            for(int j = 1;j <= m;j++)
            {
                if(a[i-1] > j)//当前的商品大小比背包大，放不下
                {
                    maxValue[i][j] = maxValue[i-1][j];
                }
                else//第i个商品大小比背包小
                {
                    //max(在不放入第i个商品 ， 放入第i个商品)
                    maxValue[i][j] = max(maxValue[i-1][j] , maxValue[i-1][j-a[i-1]] + v[i-1]);
                }
            }
        }
        return maxValue[n][m];
    }
};
