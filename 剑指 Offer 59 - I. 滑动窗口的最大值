class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) 
    {
        //思路：建一个单调递减队列-窗口移动过程中一直维护
        /*
            ————————————————————
        <—— 头                 尾 <——
            ————————————————————
        */
        vector<int> res;//存储返回数组
        deque<int> q;   //建立双向队列
        int len = nums.size();
        for(int i = 0;i < len;i++)
        {            
            //1.如果队列中元素数超出，pop头元素(左边界)
            if(i - q.front() == k)
                q.pop_front();
            //2.非空，且大于尾元素，将小于目前元素的从队尾出队列，并将当前元素入队
            //要与队尾比较而非队头，防止[1,3,1,2,0,5] 3， 在2进队之前要将1剔除
            while(!q.empty() && nums[q.back()] <= nums[i])
            {
                q.pop_back();
            }
            //从队尾入队
            q.push_back(i);
            //从形成第一个窗口开始存储返回值
            if(i >= k-1)
                res.push_back(nums[q.front()]);
        }
        return res;
    }
};
