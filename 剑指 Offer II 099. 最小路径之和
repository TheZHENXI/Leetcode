class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
       
        //状态定义：F(i,j)从(0,0)到(i,j)的最小路径总和
        vector<vector<int>> pathSum(grid);//初始化
        int row = grid.size();
        int col = grid[0].size();
        for(int i = 0;i < row;i++)
        {
            for(int j = 0;j < col;j++)
            {
                //状态转移方程：F(0,j) = F(0,j-1)
                if(i == 0 && j > 0)
                {
                    pathSum[i][j] = pathSum[i][j-1] + grid[i][j];
                }
                //F(i,0) = F(i-1,0)
                else if(j == 0 && i > 0)
                {
                    pathSum[i][j] = pathSum[i-1][j] + grid[i][j];
                }
                //F(i,j) = min(F(i-1,j),F(i,j-1))+array[i][j]
                else if(i >0 && j >0)
                {
                    pathSum[i][j] = min(pathSum[i-1][j],pathSum[i][j-1]) + grid[i][j];
                }
            }
        }
        return pathSum[row-1][col-1];
    }
};
