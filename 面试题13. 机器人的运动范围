class Solution {
public:
    int nextP[4][2] = {{0,-1},{1,0},{0,1},{-1,0}};
    int movingCount(int m, int n, int k) 
    {
        vector<vector<int>> visited(m,vector<int>(n,0));

        queue<pair<int,int>> q;
        q.push(make_pair(0,0));
        visited[0][0] = 1;
        int cnt = 1;
        while(!q.empty())
        {
            pair<int,int> curPos = q.front();
            q.pop();

            for(int i = 0;i < 4;i++)
            {
                int nx = curPos.first  + nextP[i][0];
                int ny = curPos.second + nextP[i][1];

                if(nx >= m || nx < 0 || ny >= n || ny < 0)
                    continue;
                int sum = nx%10 + nx/10%10 + nx/100%100 + ny % 10 + ny/10%10 + ny/100%100;
                if(visited[nx][ny] == 0 && sum <= k)
                {
                    q.push(make_pair(nx,ny));
                    visited[nx][ny] = 1;
                    cnt++;
                }
            }
        }

        return cnt;
    }
};
